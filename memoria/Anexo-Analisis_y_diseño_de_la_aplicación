#Análisis y diseño de la aplicación

En este anexo se presenta una descripción del análisis y diseño que se llevo a cabo antes de realizar la implementación de la plataforma. A lo largo del anexo se mostrará el documento de especificaciones de requisitos, modelado de la base de datos, diagrama de clases, casos de usos y traza de eventos, así como la descripción de los distintos módulos creados. Este documento no ha sido creado con el fin de ser completamente riguroso a las convenciones, aunque más de una vez se sigan, sino que el fin último es que el lector comprenda este documento

## Especificación de Requisitos Software

En este apartado vamos a hablar de los requisitos software que debe cumplir nuestra plataforma. Estos requisitos se elaboraron después del estudio de las herramientas actuales y el documento "¿Cómo son nuestros voluntarios?", por otra parte se ha intentado seguir las recomendaciones dadas en la Especificación de Requisitos según el estándar IEEE 830

### Introducción
#### Propósito

El propósito es definir cuáles son los requerimientos que debe tener la plataforma para elaboración de encuestas, así como la adaptación de está al experimento "¿Cómo son nuestros voluntarios?"

La aplicación se desarrollara como proyecto final de carrera y permitirá el desarrollo del experimento anteriormente citado, así como ayudar a la comunidad científica en la elaboración de encuestas mas o menos complejas, en los que se quiera aleatorizar el orden de las secciones, así como la existencia de secciones excluyentes.

#### Ambito

La plataforma debe permitir la creación y la manipulación de encuestas complejas, así como la posibilidad de limitar el tiempo y el numero de usuarios a la hora de realizar las encuestas.

Una vez definida y publicadas estas encuestas, se permitirá a los usuarios encuestados la realización de está, registrando en todo momento los tiempos tomados para la resolución de cada pregunta.

En el caso de del experimento "¿Cómo son nuestros voluntarios?", se le permitirá al usuario recibir feedback respecto a la toma de sus decisiones, con respecto a las respuestas de los demás usuarios.

Además en dicho experimento, en casos elegidos de forma aleatoria, el voluntario recibirá un pago asociado a una de sus decisiones.

Los usuarios de la plataforma no deberán de poseer algún conocimiento específico para el uso de esta.

Por otra parte la plataforma deberá de estar bien documentada para facilitar la ampliación de posibilidades de esta.

### Definiciones, Acrónimos y Abreviaturas

OpenID: estándar de identificación digital descentralizado, con el que un usuario puede identificarse en una página web a través de una URL (o un XRI en la versión actual) y puede ser verificado por cualquier servidor que soporte el protocolo.

Lenguaje de marcas: forma de codificar un documento que, junto con el texto, incorpora etiquetas o marcas que contienen información adicional acerca de la estructura del texto o su presentación.

XML: siglas en inglés de eXtensible Markup Language ('lenguaje de marcas extensible'), es un lenguaje de marcas 

CSV: siglas del inglés comma-separated values, son un tipo de documento en formato abierto sencillo para representar datos en forma de tabla, en las que las columnas se separan por comas u otro identificador predefinido y las filas por saltos de línea. Los campos que contengan una coma, un salto de línea o una comilla doble deben ser encerrados entre comillas dobles.

Lenguaje de marcas ligero: tipo de formateo de texto más o menos estandarizado, que ocupa poco espacio y es fácil de editar con un editor de texto.

Markdown: lenguaje de marcado ligero que trata de conseguir la máxima legibilidad y "publicabilidad" tanto en sus forma de entrada como de salida.

##Descripción general
### Perspectiva del Producto
La plataforma a desarrollar no estará relacionado con otros productos, aunque se adpatará esta al desarrollo del experimento "¿Cómo son nuestros voluntarios?"

### Funciones del Producto

Las funciones que debe realizar la plataforma a grandes rasgos son:

* Creación y edición de encuestas complejas.
* Registro de todas las respuestas así como sus tiempos.
* Exportar los resultados obtenidos en las encuestas.
* Ofrecer feedback a los usuarios

### Características de los usuarios
Existen tres tipos de usuarios:

* Los investigadores para la elaboración de encuestas complejas, poniendo especial hincapié en la aleatorización y diversificación de las secciones de una encuesta. Solo deberán tener conocimiento alguno en el manejo de un navegador web, por otra parte se ofrecerá un manual con todas las opciones de la plataforma
* Voluntarios que responden a los cuestionarios, que solo deberán tener conocmiento alguno del manejo de un navegador web.
* Desarrolladores que desean adaptar y ampliar la plataforma a sus necesidades, para ello a parte de este documento, se incluye un manual de desarrollo. Deberán estar familiarizados con las tecnologías usadas.

### Restricciones

La aplicación debe poder accederse desde un portal web. Así mismo los investigadores nunca obtendrán información identificativa de los voluntarios que participen en su plataforma. Deberá funcionar la plataforma bajo una máquina gobernada por Linux

AÑADIR RESTRICCIONES DE TIEMPO 

### Requisitos futuros

Debe pensarse que la plataforma se debe poder adaptar a otras cuestionarios con otros requisitos, por lo que debe estar bien documentada y tener en cuenta estas posibles necesidades. Como podría ser la creación de algún tipo de pregunta no contemplada en la plataforma actual.

Tambien se podría considerar la elaboración de un lenguaje específico del dominio para la creación de encuestas.

## Requerimientos específicos

### Interfaces Externas

Se deberá de acceder a la plataforma mediante un navegador web. Esta deberá de adaptarse al tamaño del dispositivo por el cual se accede a la plataforma, nunca siendo inferior a una resolución de 480px para su correcta visualización. Por otra parte al ser una plataforma web, se deberá tener acceso a través de la red al servidor donde esté alojado la plataforma.

La plataforma usará un sistema de direcciones web amigables, para facilitar el manejo de esta a través del navegador web.

### Requerimientos funcionales

Agruparemos los requisitos funcionales de la plataforma según el usuario que lo esté usando, por otra parte se incluirá los requisitos que debe cumplir la adopción de la plataforma al experimento "¿Cómo son nuestros voluntarios?".

La plataforma permitirá a los investigadores:

* Crear nuevas encuestas
* Añadir una fecha en la que la encuesta será visible a los voluntarios
* Añadir una fecha limite para la realización de la encuesta
* Añadir un número máximo de encuestas completadas
* Añadir un tiempo máximo para contestar la encuesta.
* Añadir consentimientos a las encuestas
* Añadir secciones a las encuestas
* Añadir subsecciones a las secciones
* Definir el orden de las secciones y subsecciones
* Aleatoriazar el orden de las secciones y subsecciones
* Generar secciones y subsecciones excluyentes con la  probabilidad indicada
* Añadir preguntas a las secciones y subsecciones, estas preguntas serán del tipo:
    * Preguntas cuya respuesta es un texto
    * Preguntas cuya respuesta es un número entero
    * Preguntas cuya respuesta es un número decimal
    * Preguntas cuya respuesta es Si/No
    * Preguntas cuya respuesta es un conjunto de opciones posibles definidas por el investigador
    * Preguntas cuya respuesta es un conjunto de opciones posibles definidas por un rango y su salto
    * Preguntas cuya respuesta es validada por una expresión regular, indicando un mensaje de error personalizado
    * Preguntas cuya respuesta es una escala Likert, pudiendo definir el rango de la escala, así como sendas etiquetas en los extremos de la escala Likert
    * Preguntas de control que tienen una respuesta única, se podrá fijar un número máximo de intentos, entre uno e infinito, así como un mensaje de error personalizable
    * Todas las preguntas anteriores descritas podrán ser obligatorias u optativas
    * Todas las preguntas anteriores descritas podrán ser dependientes de la respuesta de otra pregunta
    * Todas las preguntas anteriores descritas, se podrá cambiar el tipo de respuesta.
* Todas las opciones anteriormente descritas se podrán editar
* Se usará la sintaxis Markdown para todos los campos de la encuesta
* Exportar encuestas en formato XML
* Importar encuestas en formato XML
* Exportar los resultados de las encuestas a un formato CSV

La plataforma permitirá a los voluntarios que participen en las encuestas:

* Contestar a las encuestas
* Permitir continuar la encuesta más tarde
* En casa de responder erróneamente a la pregunta, se le indicara el fallo al usuario
* Informar del estado de la encuesta, siendo este:
    * Sin empezar
    * Terminada
    * Sin terminar
    * Sin posibilidad de terminarla debido a que la fecha ha concluido
    * Sin posibilidad de terminarla debido a que el tiempo máximo ha concluido

La plataforma permitirá a los usuarios:

* Identificarse mediante OpenID
* Registrarse mediante correo y contraseña
* Identificarse mediante correo y contraseña

La plataforma registrará todos los tiempos, así como las respuestas, y numero de intentos en las preguntas de control en los cuestionarios

En el experimento "¿Cómo son nuestros voluntarios?", la plataforma permitirá:

* Dar feedback a los usuarios, comparando sus respuestas con las dadas por otros usuarios
* El voluntario podrá recibir un pago asociado a una de sus elecciones. La probabilidad de este pago viene dada por:
    * Los usuarios que realicen la parte 2 del experimento con dinero real, tendrán un 10% de recibir un pago asociado a una de sus elecciones elegidas al azar de este apartado.
    * Los usuarios que realicen la parte 3 del experimento con dinero real, tendrán un 10% de recibir un pago asociado a una de sus elecciones elegidas al azar de este apartado.
* Los usuarios que realicen la parte 2 y la parte 3 con dinero ficticio, participarán en un sorteo. Las probabilidades de ganar dinero en este sorteo viene dadas por:
    * Los usuarios tendrán un 10% de probabilidades de ganar un premio del sorteo, pudiendo ser el premio cuatro cantidades predefinidas, cada una con igual probabilidad de ser elegida.
* La plataforma avisará mediante correo a los usuarios que hayan ganado dinero.
* La plataforma se encargará de transmitir la información de los usuarios que han recibido algun tipo de compensación económica al responsable del pago.
* Los resultados de este experimento tendrán un formato CSV adaptado a las necesidades de los investigadores.


### Requisitos de Rendimiento

Al tratarse de una plataforma web que permite la ejecución de múltiples usuarios al mismo tiempo, puede que existan problemas derivado a la carga de usuario. Para la realización del experimento "¿Cómo son nuestros voluntarios?", se espera llegar a 1000 usuarios durante un mes, por lo que en un principio no debería de existir problemas de carga, aun así se medirá en la maquina de producción la carga máxima de usuarios que soporta el sistema y el tiempo de respuesta.



### Atributos del Sistema

Se espera una alta fiabilidad del sistema, aun así se registrará cualquier incidente en la plataforma pudiendo avisar al desarrollador y administrador de la plataforma.

También se espera en un futuro la ampliación de la plataforma así como el uso de esta en otras investigaciones, por lo que debe estar bien documentada para facilitar su adopción.

En cuanto a la seguridad, como ya hemos comentado anteriormente se registrará cualquier incidente y acceso a la plataforma. En el sistema existirán tres tipos de usuarios, el administrador, que deberá tener acceso al servidor donde esté alojado la plataforma. Y los investigadores y usuarios que respondan a las encuestas, que podrán entrar en el sistema mediante open-id, o mediante un login y contraseña.







## Diagrama de Clases

En un primer lugar se va a mostrar sin profundizar el diagrama de clases que hace uso de la base de datos, representando unicamente el modelo estático del sistema.
[schema1_alto_nivel.svg]

Observando con mas detenimiento la clase Question, cada tipo de pregunta desciende de la clase Question
[preguntas.svg]

Por otra parte, para el experimento "¿Como son nuestos voluntarios?" Se creo una serie de clases para los distintos juegos y sorteos

[games_sin_detalle.svg]

Analizando con mas detenimiento la clase Game

[games.svg]

Como hemos dicho anteriormente estos diagramas solo hacen referencia al modelo estático del sistema, no así a las demás clases que interactuan con estas, como puede ser los distintos formularios y validadores web usados para la representación del modelo.

### Entidades del sistema

A continuación vamos a describir las entidades del sistema:


#### User, usuario

Un usuario es una persona que se registra en la plataforma para poder hacer uso de ella, ya sea creando encuestas o contestándolas. Además guarda los permisos que posee dicho usuario dentro de la plataforma, pudiendo tener un rol de investigador o de voluntario.


#### Survey, encuesta

Survey sería la cabecera de la encuesta, en la que están definidas los atributos y las limitaciones de está, como puede ser la fecha durante la que estará activa la encuesta, la duración de esta, o simplemente el título y la descripción d eesta.

#### Consent, consentimiento

Consent almacena los consentimientos que debe aceptar un usuario para realizar una encuesta. Cada consentimiento pertenece a una encuesta.

#### Section, sección

Section sirven para definir los distintas secciones organizatitivas que posee una encuesta, a su vez una sección puede contener mas secciones. Además en cada sección se puede definir si son secciones exclusivas respecto a las secciones del mismo nivel, así como definir el nombre y la probabilidad de realizar dicha sección de la encuesta. Al final las secciones generan un árbol que cuelga de una encuesta.

#### Question, pregunta

Question almacena una pregunta de la encuesta. +Las preguntas pueden ser de distinto tipo, cada una tiene su propia clase que hereda de Question. Cada pregunta está definida dentro de una sección.

##### QuestionText, preguntas de texto

Almacena preguntas cuya respuesta es texto, almacena también las limitaciones que pueda tener la respuesta, como puede ser si es un número entero, decimal o viene limitado por una expresión regular.

##### QuestionYN, preguntas de si o no

Hace referencia a las preguntas cuya respuesta es si o no.

##### QuestionChoice, preguntas de elección

Contiene las distintas opciones posibles en las preguntas cuyo rango de respuestas está predeterminado. También guarda información de como representar estás opciones al usuario.

##### QuestionLikerScala, preguntas de escala likert

Almacena la información necesaria para las preguntas likert.

#### Condition, condición

Condition hace referencia a las preguntas dependientes de la respuesta de otra pregunta. Guardando que pregunta depende de quién así como las condiciones necesarias para mostrar dicha pregunta.

#### Answer, respuesta.

Guarda la respuesta que ha dado un usuario a una pregunta, así como el tiempo empleada en ella.

#### StateSurvey, estado de la encuesta

Almacena la información relativa del estado en el que se encuentra una encuesta por parte de un usuario, guardando entre otras cosas la sección por la que va, el tiempo empleado o el estado de la encuesta.

### Entidades del sistema del proyecto "¿Cómo son nuestros voluntarios?"


#### Rafle, rifa

En el sorteo que hay dentro del proyecto, rafle se encarga de decidir si el usuario es premiado o no y guarda la cantidad ganada.

#### GameImpatience, juego de la impaciencia

Hace referencia a los resultados de las decisiones tomadas en el juego de la impaciencia, que depende unicamente solo de un usuario.

#### Game

Dentro del proyecto existen varios juegos que involucran a dos usuarios, cada juego depende de las decisiones tomadas en las respuestas de la encuesta. Cada juego hereda de esta entidad

##### GameLottery1, juego de la lotería 1

Guarda la información de la decisión tomada en la primera versión del juego de la lotería, descrita en el ANEXO X

##### GameLottery2, juego de la lotería 2

Guarda la información de la decisión tomada en la segunda versión del juego de la lotería, descrita en el ANEXO X

##### GameRent1, juego de la renta 1

Guarda la información de la decisión tomada en la primera versión del juego de la renta, descrita en el ANEXO X

##### GameRent2, juego de la renta 2

Guarda la información de la decisión tomada en la segunda versión del juego de la renta, descrita en el ANEXO X

##### GameUltimatum, juego del ultimatum

Guarda la información de la decisión tomada en el juego del ultimatum, descrita en el ANEXO X

##### GameDictador, juego del dictador

Guarda la información de la decisión tomada en el juego del dictador, descrita en el ANEXO X



## Esquema Relacional

A continuación mostramos el esquema relacional, generado por el ORM SQLAlchemy. 

[schema_bbdd.svg]

Durante el diseño se tuvo que tomar la decisión de como implementar las clases heredaras, si todas en la misma tabla, en distintas o algunas compartiendo tabla y otras no. Se decidió que todas compartirían la misma tabla, sobre todo a que no se espera una gran cantidad de entradas, mas comparándolo con otras tablas como puede ser Answer.

Aunque no se aprecia en el esquema, existen las siguientes restricciones en la declaración del modelo que se trasladan a la base de datos:

* Tabla stateSurvey, la tupla user_id y survey_id es única.
* Tabla condition, la tupla subquestion_id y parent_id es única.
* Tabla answer, la tupla user_id y question_id es única
* Tabla user, el valor de email es único.

Por otra parte se muestra el esquema relacional, donde se guardan los resultados de los distintos juegos y sorteos

[schema_bbdd_games.svg]

Las restricciones de estas tablas son las siguientes:

* Tabla gameImpatience, la tupla user_id y survey_id es única.
* Tabla raffle, la tupla user_id y survey_id es única
* Tabla game, la tupla userA_id, userB_id y survey_id es única





## Casos de Uso
En esta sección vamos a analizar los posibles usos que podrán darse a la plataforma. Para ilustarlo vamos a emplear algunos diagramas de casos de uso y trazas de eventos.


[voluntario.svg]
[investigador.svg]
[Administrador.svg]




## Módulos de la plataforma

Para la elaboración de las plataformas se ha seguido las recomendaciones dadas por los desarrolladores de Flask

http://flask.pocoo.org/docs/becomingbig/

https://github.com/mitsuhiko/flask/wiki/Large-app-how-to

http://mattupstate.com/python/2013/06/26/how-i-structure-my-flask-applications.html?utm_medium=referral&utm_source=pulsenews

Se ha dividido la plataforma en distintos módulos, agrupando estas a nivel de funcionalidades.

[modulos.png]

Los módulos con lo que se puede interactuar visualmente a través de un navegador tienen la siguiente estructura:

* Vistas: La vista de una función es donde una petición HTTP cumple con la lógica del programa. Es decir cada función tiene definida una ruta web por la que se puede acceder. En un modelo MVC, sería parte del controlador. Es esta función es donde los datos de la petición HTTP se traducen a una llamada a la lógica de la aplicación produciendo una respuesta.
* Formularios: Es el lugar donde están definidas las clases que contienen los formularios de un módulo con los que puede interactuar un usuario, así como las distintas validaciones que sufren los formularios.
* Plantillas: Cuando la vista genera una respuesta, es la plantilla quien se encarga de generar el código HTML y JavaScript, para representar los resultados al usuario.

En la figura [traza de eventos], podemos ver una traza de eventos genérica que corresponde a la situación en la que un usuario rellena un formulario y lo envía a la plataforma. Luego se comprueba los permisos del usuario y se valida el formulario. Una vez que es valido se modifica el modelo y se devuelve una nueva vista al usuario. 

### Módulo de decoradores

Este módulo contiene los decoradores usados para proteger las vistas de los distintos módulos que se pueden acceder vía petición HTML, así se evita que cualquier usuario pueda ejecutar una vista a la que no tiene acceso.
Esto se ha realizado mediante decoradores, ya que permiten alternar de manera dinámica la funcionalidad de una función, método o clase, sin tener que realizar ningún cambio de código en la clase decorada.

Los decoradores disponibles son los siguientes:

login_required: Comprueba que el usuario ha ingresado en la plataforma.
researcher_requerid: Comprueba que el usuario es un investigador.
finished_survey: Comprueba que el usuario ha finalizado la encuesta.
belong_researcher: Valida que la encuesta, sección o pregunta que que quiere modificar pertenece al investigador en cuestión y no a otro.
valid_survey: Comprueba que la encuesta ya se ha publicado.
there_is_stateSurvey: Valida que existe y es valido el estado de la encuesta por parte de un usuario que quiere rellenar una encuesta.

Por ejemplo:
[code]
@blueprint.route('/survey/new', methods = ['GET', 'POST'])
@login_required
@researcher_required
def new_survey():
[/code]

Para acceder a la vista new_survey, que sirve para la creación de una nueva encuesta, debemos acceder a la dirección **http://servidor/survey/new**, pero antes de poder acceder, se comprueba que el usuario se haya autentificado en el sistema, mediante el decorador **@login_required**, y que además el usuario tenga permisos de investigador, **@researcher_required**. De esta forma se puede proteger las páginas a los que los usuarios pueden acceder.



### Módulo Planificador de tareas.

Este módulo se encarga de ejecutar tareas periódicas. Concretamente tiene definidas dos:
* Envía periódicamente al investigador los resultados de la encuesta.
* En la adaptación del experimento "¿Cómo son nuestros voluntarios?", se decidió realizar los pagos manualmente, por lo que se envía un correo al responsable de los pagos, con el dinero y usuario al que debe realizar el pago.


### Módulo de Autentificación

En el módulo de autetificación permite las siguientes opciones:

* Registrarnos en la plataforma: Uno se puede registrar mediante el uso de un correo.
    A esta función se accede mediante la vista: "auth/register"
* Validarnos mediante el uso de un correo y contraseña
    A esta función se accede mediante la vista: "auth/loginEmail"
* Validarnos mediante el uso de un servidor OpenID.
    A esta función se accede mediante la vista: "auth/" o "auth/login"
* Cerrar la sesión actual.
    A esta función se accede mediante la vista: "auth/logout"

### Módulo del investigador

Este modulo permite a los usuarios que sean investigadores, las siguientes acciones:

* Listado de encuestas creadas por un investigador:
    A esta función se accede mediante las vistas: "researcher/survey/" o "researcher/survey/index".

* Creación de encuestas: Durante la creación de una encuesta se comprueba que todos los campos del formulario son validos, además permite definir las siguientes opciones:
    * Título.
    * Descripción: Se hace uso de la sintaxis Markdown para el enriquecimiento del texto.
    * Número máximo de usuarios que pueden acceder a la encuesta, si es que lo hay.
    * Fecha de inicio de la encuesta
    * Fecha de finalización de la encuesta
    * Tiempo máximo para la realización de la encuesta, si es que lo hay.
    A esta función se accede mediante la vista: "researcher/survey/new"

* Modificación de una encuesta: Se permite modificar cualquier campo de una encuesta creada
    A esta función se accede mediante la vista: "researcher/survey/<int:id_survey>", siendo id_survey el identificador de la encuesta a modificar.

* Eliminación de una encuesta: Se permite eliminar una encuesta creada, siempre que no haya sido publicada.
    A esta función se accede mediante la vista: "researcher/survey/deleteSurvey/<int:id_survey>", siendo id_survey el identificador de la encuesta a eliminar.

* Creación de consentimientos: Mediante un formulario, el investigador informa de los consentimientos que debe aceptar el usuario para poder participar en la encuesta. Hace uso de la sintaxis Markdown para el enriquecimiento del texto.
    A esta función se accede mediante la vista: "researcher/survey/<int:id_survey>/consent/add", siendo id_survey el identificador de la encuesta.

* Modificación de un consentimiento: 
    A esta función se accede mediante la vista: "researcher/survey/<int:id_survey>/consent/<int:id_consent>", siendo id_survey el identificador de la encuesta, e id_consent el identificador del consentimiento

* Eliminación de un consentimiento: 
    A esta función se accede mediante la vista: "researcher/survey/<int:id_survey>/consent/<int:id_consent>/delete", siendo id_survey el identificador de la encuesta, e id_consent el identificador del consentimiento

* Creación de secciones y subsecciones: El investigador puede definir con total libertad el número de secciones y subsecciones que tiene una encuesta, además permite definir las siguientes opciones:
    * Título de la sección.
    * Descripción: Se hace uso de la sintaxis Markdown para el enriquecimiento del texto.
    * Secuencia de la sección.
    * Porcentaje de número de usuarios que realizan la sección.
    El usuario que realice la encuesta recorrerá en profundidad el árbol generado por la encuesta. Si dos o mas ramas tienen la misma secuencia, se elige al azar que rama recorrer primero. Si dos o mas ramas con la misma secuencia, tienen un porcentaje menor que 1, este porcentaje indica la probabilidad que hay para recorrer esa rama y no cualquiera de las otras que tienen la misma secuencia.
    A la función de añadir una sección a una encuesta dada,  se accede mediante la vista: "researcher/survey/<int:id_survey>/section/new", siendo id_survey el identificador de la encuesta.
    A la función de añadir una sección a una sección dada, se accede mediante la vista: "researcher/survey/<int:id_survey>/section/<int:id_section>/new", siendo id_survey el identificador de la encuesta, e id_sectión el identificador de la sección de la que va a colgar la nueva sección.

* Modificación de una sección o subsección.
    A esta función se accede mediante la vista: "researcher/survey/<int:id_survey>/section/<int:id_section>", siendo id_survey el identificador de la encuesta, e id_sectión el identificador de la sección a modificar

* Eliminación de una sección o subsección:
    A esta función se accede mediante la vista: "researcher/survey/<int:id_survey>/deleteSection/<int:id_section>", siendo id_survey el identificador de la encuesta, e id_sectión el identificador de la sección a eliminar.

* Creación de preguntas: Dada una sección, el investigador puede añadir las preguntas que desee a la sección. Las posibilidades que tiene son las siguientes:
    * Preguntas cuya respuesta es Si o No, las opciones disponibles son las siguientes:
        * Texto de la pregunta: Se hace uso de la sintaxis Markdown para el enriquecimiento del texto.
        * Indicar si es una pregunta cuya respuesta es obligatoria o no.
        * Respuesta correcta a la pregunta si es que la tiene, sirve para crear preguntas de control
        * Número máximo de intentos que tiene el usuario para responder bien a la pregunta.
    * Preguntas cuya respuesta es un texto, las opciones disponibles son las siguientes:
        * Texto de la pregunta: Se hace uso de la sintaxis Markdown para el enriquecimiento del texto.
        * Indicar si es una pregunta cuya respuesta es obligatoria o no.
        * Respuesta correcta a la pregunta si es que la tiene, sirve para crear preguntas de control
        * Número máximo de intentos que tiene el usuario para responder bien a la pregunta.
        * Validar que el texto introducido por el usuario en la respuesta es:
            * Número entero
            * Número decimal
            * Comprobarlo mediante una expresión regular definido en sintaxis Python.
        * Mostrar un mensaje de error personalizado si ha introducido en un formato incorrecto la respuesta.
    * Preguntas cuya respuesta es una opción dada, las opciones disponibles son las siguientes.
        * Texto de la pregunta: Se hace uso de la sintaxis Markdown para el enriquecimiento del texto.
        * Indicar si es una pregunta cuya respuesta es obligatoria o no.
        * Respuesta correcta a la pregunta si es que la tiene, sirve para crear preguntas de control
        * Número máximo de intentos que tiene el usuario para responder bien a la pregunta.
        * Formato en el que se mostrará la pregunta, hay tres posibilidades:
            * Horizontal: Se mostrará las opciones mediante un radio botón, en una disposición horizontal.
            * Vertical: Se mostrará las opciones mediante un radio botón, en una disposición vertical.
            * Select: Se mostrará las opciones mediante un formulario de selección.
        * Definición de las respuestas disponibles mediante la definición de un rango de números, así como el salto entre ellos.
        * Definición de las respuestas disponibles añadiéndolas de una en una
    * Preguntas cuya respuesta es una escala likert, las opciones disponibles son las siguientes.
        * Texto de la pregunta: Se hace uso de la sintaxis Markdown para el enriquecimiento del texto.
        * Indicar si es una pregunta cuya respuesta es obligatoria o no.
        * Indicar el rango de la escala likert, que estará definida entre 0-1 y un número mayor que 1
        * Etiqueta opcional para indicar el significado mínimo de la escala
        * Etiqueta opcional para indicar el significado máximo de la escala
    Todas las preguntas descritas anteriormente se pueden mostrar o no dependiendo de la respuesta dada a una pregunta de la misma sección.
    A esta función se accede mediante la vista: "researcher/survey/<int:id_survey>/section/<int:id_section>/addQuestion", siendo id_survey el identificador de la encuesta e id_sectión el identificador de la sección donde se encuentra la pregunta.

* Modificación de una pregunta:
    A esta función se accede mediante la vista: "researcher/survey/<int:id_survey>/section/<int:id_section>/question/<int:id_question>", siendo id_survey el identificador de la encuesta e id_sectión el identificador de la sección donde se encuentra la pregunta, e id_question el identificador de la pregunta a modificar

* Eliminación de una pregunta:
    A esta función se accede mediante la vista: "researcher/survey/<int:id_survey>/Section/<int:id_section>/deleteQuestion/<int:id_question>", siendo id_survey el identificador de la encuesta e id_sectión el identificador de la sección donde se encuentra la pregunta, e id_question el identificador de la pregunta a eliminar

* Duplicar sección: Permite duplicar una sección así como todas las secciones y preguntas que cuelgan de su rama.
    A esta función se accede mediante la vista:
    * "researcher/survey/<int:id_survey>/duplicateSection/<int:id_section>/section/<int:id_section2>', siendo id_survey el identificador de la encuesta, id_sectión el identificador de la sección a copiar, id_section2 el identificador de la sección donde se copiará.
    * "researcher/survey/<int:id_survey>/duplicateSection/<int:id_section>/survey/', siendo id_survey el identificador de la encuesta, id_sectión el identificador de la sección a copiar, se copiará directamente sobre la raiz, la cual es la encuesta.


* Exportar una encuesta: Permite exportar a un fichero XML, la encuesta seleccionada.
     A esta función se accede mediante la vista: "researcher/survey/exportSurvey/<int:id_survey>", siendo id_survey la encuesta a exportar

* Importar una encuesta: Permite importar una encuesta mediante un fichero XML.
    A esta función se accede mediante la vista: "researcher/survey/new"

* Exportar estadísticas de una encuesta: Permite exportar en un fichero CSV, los resultados de la encuesta seleccionada
     A esta función se accede mediante la vista: "researcher/survey/exportStats/<int:id_survey>", siendo id_survey la encuesta a exportar

Las vistas anteriores solo están disponibles para investigadores, además no se pueden editar encuestas de otros investigadores, ya que todas las vistas están protegidas mediante el decorador "@belong_researcher"

### Módulo del encuestado

Este módulo permite a los usuarios que sean voluntarios realizar rellenar encuestas. Las acciones disponibles son las siguientes:

* Listar todas las encuestas disponibles, así como el estado de esta, ya sea sin empezar, empezada o finalizada.
    A esta función se accede mediante la vista: "survey/index" o "survey/"

* Empezar o continuar una encuesta: Es la función encargada de decidir cual es el siguiente paso cuando se realiza una encuesta, ya sea mostrar los consentimientos, mostrar una sección de la encuesta, indicar que se ha finalizado la encuesta o mostrar el feedback de la encuesta si es que la tiene.
    A esta función se accede mediante la vista: "survey/<int:id_survey>", siendo id_survey la encuesta a realizar.

* Mostrar los consentimientos: Esta función es la encargada de mostrar el consentimiento que el usuario debe aceptar para realizar la encuesta.
    A esta función se accede mediante la vista "survey/<int:id_survey>/consent", siendo id_survey la encuesta a realizar 

* Mostrar una sección: Esta función es la encargada de mostrar una sección, con todas las preguntas que hay en ella, además de guardar los resultados de las preguntas, así como los tiempos empleados en ellas.
    A esta función se accede mediante las vistas "survey/<int:id_survey>/section/<int:id_section>" o "survey/<int:id_survey>/section/", siendo id_survey la encuesta a realizar e id_section, la sección, 

Todas las vistas están protegidas, de manera que es obligatorio haber ingresado en la plataforma, además en la vista **Mostrar una sección** solo se permite acceder a la sección que le toca realizar al usuario.

### Módulo de Feedback

Este módulo permite dar feedback sobre las decisiones tomadas en el proyecto "¿Cómo son nuestros voluntarios?". Cada vista corresponde con una decisión concreta del experimento. 

* Lógica: Durante el desarrollo del proyecto "¿Cómo son nuestros voluntarios?", se decidió que el orden del feedback sobre las decisiones tomadas, iba a ser el mismo que el realizado durante el experimento, y debido a que cada voluntario se le asigna un orden al azar, está función es la encargada de decidir que feedback se le va a mostrar al voluntario, siempre siguiendo el mismo orden de la encuesta.
    A esta función se accede mediante la vista "feedback/id_survey", siendo id_survey la encuesta de la que recibir feedback.

* Juegos de la lotería, la renta y dictador: Corresponde a las decisiones de las versiones de los dos juegos de la lotería y los dos juegos de la renta. Muestra la respuesta del usuario y la media dada por los demás voluntarios, además muestra el porcentaje de los voluntarios que han tomado la misma decisión que el usuario.

* Juego del ultimatum: A parte de mostrar la información que se da en los demás juegos, también se muestra el porcentaje de voluntarios que hubiesen aceptado la cantidad dada por el usuario.

### Módulo de estadísticas:

Este módulo es el encargado de generar el fichero de resultados para los investigadores. Concretamente existen dos funciones, una para encuestas genéricas y otra para el experimento "¿Cómo son nuestros voluntarios?" Ya que se adapto los resultados a la necesidad de los investigadores en cuanto al formato requerido por ellos para trabajar más cómodamente.

### Módulo Juegos:

Este módulo es el encargado de decidir en los juegos del experimento "¿Cómo son nuestros voluntarios?", que usuarios se enfrentan con quién. Además de buscar las respuestas dadas por los voluntarios.

A la hora de decidir que usuarios van a enfrentarse, se busca a todos los usuarios que no han realizado ningún enfrentamiento. Si este llega a un número mínimo necesario para que no existan enfrentamientos repetidos, se continua. Sino se selecciona las decisiones tomadas de otros voluntarios que ya se han enfrentado, pero sin posibilidad de que estos últimos vuelvan a salir premiados.

### Módulo de visualización de estadísticas y juegos.

Este módulo permite la visualización de los resultados de las encuestas, además también permite la visualización de los resultados de los juegos del experimento "¿Cómo son nuestros voluntarios?"

* Listar todas las encuestas creadas por un investigador:
    A esta función se accede mediante la vista "stats/" o "stats/index"
* Listar el resultado de una encuesta: Representa mediante una tabla el fichero csv de las encuestas, se puede elegir el criterio de ordenación.
    A esta función se accede mediante la vista "stats/<int:id_survey>", siendo id_survey la encuesta de la que se desea visualizar los resultados.
* Listar los juegos disponibles en una encuesta:
    A esta función se accede mediante la vista "stats/<int:id_survey>/games", siendo id_survey el identificador de la encuesta
* Listar el resultado de un juego de una encuesta: Representa mediante una tabla, los resultados de de los distintos juegos de una encuesta, se puede elegir el criterio de ordenación.
    A esta función se accede mediante la vista "stats/<int:id_survey>/games/gameX", siendo id_survey el identificador de la encuesta.

Las vistas anteriores solo están disponibles para investigadores, además solo se puede acceder a las encuestas creadas por el propio investigador.


### Módulo de modelo

Este es el módulo descrito anteriormente en la sección diagrama de clases

Casi todos los demás módulos interaccionan con este Módulo.

### Módulo de configuración

Este módulo se encarga de leer la configuración de la plataforma una vez que se inicia está. Aunque no se ha señalado explícitamente, los demás módulos interaccionan con él si tienen que leer alguna configuración de la plataforma.

Se han tenido en cuenta las recomendaciones dadas en http://flask.pocoo.org/docs/config/#configuration-best-practices

Y se ha decidido crear un sistema de clases y herencia para la configuración del sistema, pudiendo cambiar el modo de funcionamiento de la aplicación simplemente cambiando la variable de entorno **FLASK_CONFIG**, la estructura que sigue y los modos disponibles son los siguientes:

[code]
class Config(object):
    # configuración básica de la plataforma

class DevelopmentConfig(Config):
    # Configuración de la plataforma en modo desarrollo
    DEBUG = True

class TestingConfig(Config):
    # Configuración de la plataforma para test unitarios

class Jmeter(Config):
    # Configuración de la plataforma para la realización de pruebas de sobrecarga

class ProductionConfig(Config):
    # Configuración de la plataforma en modo producción
    # Se define quien es el usuario administrador y cual es el servidor de correo para enviar los distintos logs

class HerokuConfig(ProductionConfig):
    # Configuración de la plataforma en modo producción en la nube Heroku
    # Usa el sistema de logs de Heroku para almacenarlos.


class UnixConfig(ProductionConfig):
    # Configuración de la plataforma en modo producción en una máquina de tipo Unix
    # Hace uso del sistema de logs de la máquina Unix.
[/code]

Por otra parte, para facilitar el tener varias configuraciones posibles, se carga primeramente la configuración básica definida anteriormente y luego se puede reemplaza por la leída en la variable de entorno **SWARMS_SURVEY_SETTINGS**, pudiendo cambiar fácilmente la configuración.

### Módulo shell:

Este módulo se accede mediante la consola de la plataforma, dando acceso a un interprete Python.
[code]
$ ./manage.py shell
// shell interactively of swarm-surveys, "import utiles" to access the administration tools
In [1]: from current_app import utiles
[/code]

Entre las opciones disponible en **utiles**, está la de listar usuarios, dar o quitar permisos de investigador a un usuario dado o Reiniciar los juegos del experimento "¿Cómo son nuestros voluntarios?"

Además mediante el uso de esta interfaz de linea de comandos, se puede acceder a cualquier módulo definido en la plataforma.

Por ejemplo,  ejecutar la función de generar los resultados de una encuesta:

[code]
In [1]: from current_app import models
In [2]: from current_app import stats
In [2]: survey = models.Survey.query.get(1)
In [3]: stats.write_stats(survey)
written file in /home/jarenere/swarm_surveys/stats_csv/¿Cómo_son_nuestros_voluntarios?_1.csv
[/code]


### Prototipado de las ventanas y cuestiones de usabilidad

Después del análisis y el diseño de las distintas partes de la aplicación, se continuo con un diseño preliminar de la interfaz para el usuario. Se tomaron distintas ideas de las plataformas estudiadas para la elaboración de encuestas, así como las guías de usabilidad del proyecto KDE, http://techbase.kde.org/Projects/Usability/HIG

Para facilitar al investigador la navegación entre las distintas secciones, se decidió mostrar el árbol de secciones por completo en un lateral de la ventana. Además de mostrar en la parte superior un menú de tipo "migas de pan", que presenta en forma textual todos los enlaces que describen la ruta de una sección a partir de la raíz, siendo esta la propia encuesta.

Por otra parte para mejorar la usabilidad de la aplicación, se ha añadido código JavaScript en distintas páginas para ofrecer ciertas funcionalidades al usuario, sin tener que realizar peticiones a la plataforma web, añadiendo velocidad y fluidez a la plataforma.

Se decidió también añadir un editor y visualizador de código Markdown para poder comprobar en tiempo real el formato de texto que verían los usuarios a la hora de realizar encuestas.

Por otra parte para mejorar la usabilidad de la plataforma, se uso un sistema de URL amigables, para recordar mas fácilmente la funcionalidad de cada página web.

Además durante el prototipado de las ventanas, se tuvo en cuenta las funcionalidades que provee el framework Bootstrap, para facilitar que las distintas páginas se adaptasen al tamaño del navegador.

#### Esquema de navegación


#### Diseño del experimento "¿Cómo son nuestros voluntarios?"

Debido a la naturaleza del proyecto, siempre se intenta evitar el influir a los participantes, para que las respuestas que den sean las que realmente quieren dar. Esto incluye cualquier tipo de feedback visual, incluso el nombre del proyecto "¿Cómo son nuestros voluntarios?", induce a pensar como voluntario.

El diseño final para el experimento, se puede ver en las capturas XX