#Contexto Tecnológico

En este capítulo se estudia las diferentes tecnologías que fueron utilizadas en el desarrollo del presente PFC. En primer lugar se explican algunos conceptos referente al modelo-vista-controlador (MVC). Después se introduce brevemente el lenguaje utilizado así como las tecnologías asociadas. Por último el software utilizado durante las fases de desarrollo del proyecto.

## Modelo-vista-controlador

MVC es un patrón de diseño de las aplicaciones software, según la definición de Christopher Alexander **"cada patrón describe un problema que ocurre una y otra vez en nuestro entorno, así como la solución a ese problema, de tal modo que se pueda aplicar esta solución un millón de veces, sin hacer lo mismo dos veces."** *1

El patrón MVC consiste en tres tipos de objetos: 

*El *Modelo* es la representación de la información con la cual es sistema opera.
*La *Vista* que es su representación del modelo (información y lógica del negocio), en un formato adecuado para interaccionar con él.
*El *Controlador* que define el modo en que la interfaz reacciona a la entrada del usuario e invoca peticiones al modelo.

*ModelViewControllerDiagram_es.svg*
Diagrama que muestra la relación entre el modelo, la vista y el controlador. Las lineas solidas indicas una asociación directa, las punteadas indirecta


En otras palabras, el flujo de control sería:

* El usuario realiza una acción en la interfaz
* El controlador trata el evento de entrada
* El controlador notifica al modelo la acción del usuario, lo que puede implicar un cambio en el estado del modelo
* Se genera una nueva vista. La vista toma los datos del modelo. En ningún momento, el modelo tiene conocimiento directo de la vista
* La interfaz de usuario espera otra interacción del usuario, que comenzará otro nuevo ciclo


## Flask

Dentro de los objetivos del proyecto, se decidió que tanto los usuarios como los investigadores interaccionar con la plataforma mediante un portal web. Para la creación de esta plataforma, se eligió Flask, que es una micro plataforma para el desarrollo web escrito en Python. El significado de **micro** es que tiene como objetivo mantener un núcleo simple pero extensible, sin tomar decisiones por el desarrollador.

Flask no incluye capa de abstracción para la base de datos, validación de formularios o cualquier otra cosa que se pueda encontrar mediante el uso de diferentes bibliotecas que ya existen. En su lugar Flask soporta extensiones para añadir estas funcionalidades a la aplicación.

El núcleo de Flask trae por defecto:

* Un servidor de desarrollo y un debugger incluido en el servidor.
* Soporte de test unitarios integrados
* Uso de URLs amigables
* Generador de plantillas Jinja2
* Soporte para cookies seguras

La decisión de usar Flask como marco de trabajo para el proyecto viene debido a las características anteriormente citadas, además de su suave curva de aprendizaje, permitiendo de manera rápida empezar a construir el sistema con tener unos conocimientos básicos de Python y HTML.

Por otra parte Flask posee una licencia de software libre permisiva, concretamente BSD, dándonos gran libertad a la hora de desarrollar. Tambien posee una excelente documentación con diversos consejos como puede ser la estructuración de un programa grande, o el manejo de ficheros de configuración.

Todo esto facilita la creación de aplicaciones de manera fácil y rápida.

### Python

Debido a la elección de Flask, para el desarrollo de la plataforma se ha usado el lenguaje de programación Python, desarrollado a finales de los ochenta por Guido van Rossum en el Centro para las Matemáticas y la Informática en los Paises Bajos. Python es un lenguaje de programación multiparadigna y que soporta la orientación a objetos, programación imperativa y la programación funcional. La sintaxis de Python esta basada en la legibilidad y transparencia, obligando al usuario a escribir código bien identado.


### Jinja2

Jinja2 es un lenguaje moderno y amistoso para la creación de plantillas. El uso de plantillas, junto con los datos obtenidos del modelo, permite la generación de paginas web dinámicas de manera fácil, permitiendo con una única plantilla, la generación de páginas diferentes.

El motor de Jinja2 entre sus características están el uso de filtros, bucles variables, herencia, así como el uso de funciones externas escritas en Python. Además provee de un sistema automático de escapado HTML, para prevenir técnicas de XSS *4, que es una brecha de seguridad típico de las aplicaciones web.

Jinja2 junto con el código obtenido del modelo, es capaz de generar la vista del modelo MVC, esta vistas son páginas web HTML que recibe el usuario.

### Otros lenguajes
Aparte de los lenguajes indicados anteriormente, se ha usado HTML, que es el lenguaje estándar que sirve para la la elaboración de páginas web.

También se ha hecho uso de CSS, Hojas de Estilo en Cascada (Cascading Style Sheets), que es un lenguaje usado para describir el aspecto y el formato de un documento escrito en un lenguaje de marcas, en nuestro caso HTML.

Además se ha hecho uso de JavaScript, un lenguaje de programación que normalmente se usa en el lado del cliente, en nuestro caso navegador web, que permite mejoras y la adición de funcionalidades en la interfaz del usuario, vista.

### Bootstrap

En los objetivos de la plataforma se incluía que el diseño web fuese adaptable, esto significa que el diseño de la página se ajuste dinámicamente a las características del dispositivo usado, ya sea este un ordenador de escritorio, una tablet, teléfono móvil...

Para ello se hizo uso de Bootstrap, que es una colección de herramientas que contiene código HTML, plantillas CSS, formularios y otros componentes de la interfaz de una página web para la creación de páginas web con diseño adaptable

**imagen de web adaptativa**

### SQLAlchemy

Para dar persistencia a los datos manejados por el modelo, se hizo uso de SQLAlchemy, que es un ORM, Mapeo objeto-relacional (Object Relacional Mapper). El ORM es una técnica de programación para convertir datos entre el sistema de tipos utilizado en un lenguaje de programación orientado a objetos, en nuestro caso Python, y la utilización de una base de datos relacional, creando en la practica una base de datos orientada a objetos.

El uso de SQLAlchemy permite trabajar con bases de datos relacionales de diferentes fabricantes, abstrayéndote de la elección usada, como puede ser SQLite, MySQL u Oracle, pudiendo escribir la misma consulta independientemente de la base de datos usada por debajo. Lo cual permite cambiar fácilmente de base de datos a usar.

Además también se ha hecho uso de Alembic, que es una herramienta de migración de base de datos para SQLAlchemy, esta herramienta permite ir actualizando de manera transparente la base de datos mientras el programa va creciendo, sin necesidad de crear una nueva base de datos y realizar costosas migraciones de una a otra. Además de mantener un historial de los cambios en la base de datos, lo cual permite revertir la base de datos a una anterior versión. Todo esto facilita el desarrollo de la aplicación, así como la actualización de esta en entornos de producción.

### WTForms

Para la realización de los cuestionarios se ha utilizado WTForms, el cual es una biblioteca para la validación y representación de formularios, abstrayéndote del código HTML necesario para la representación de estos elementos en la pagina web.

Además permite de manera fácil la creación de nuevos validadores y la creación de nuevos campos hechos a medida para la aplicación.

## GitHub

Ya que una de las motivaciones del proyecto es la realización de una plataforma que puede ayudar a la comunidad científica a la elaboración de experimentos participativos, se determinó que el desarrollo del proyecto fuese completamente transparente, libre y abierto.

Para ello se usó desde el principio GitHub, el cual es una plataforma de desarrollo colaborativo para alojar proyectos utilizando el sistema de versiones Git. Todo el código, así como la evolución de este se puede encontrar en "https://github.com/nukru/frame_game_theory"

## Software de apoyo

Durante el desarrollo del proyecto se utilizaron ademas las siguientes aplicaciones:

* Sublime Text 2 como editor de texto y editor de código fuente, junto los siguientes extensiones:
    * git: extensión para integrar Git dentro de Sublime Text
    * Indent XML: indentación de código XML
    * Sublime Code Intel, una extensión para el autocompletado de código
    * Sublime Linter, para la comprobación de errores potenciales en la escritura de código
* JMETER para la realización de pruebas de sobrecarga
* LaTeX para la elaboración de la documentación







*1 “Design Patterns” [GoF95] en la sección “¿Qué es un patrón de diseño?
*2 info de la licencia
*3 info de la licencia
*4 info de XSS