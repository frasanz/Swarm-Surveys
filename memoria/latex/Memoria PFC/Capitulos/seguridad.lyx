#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass ociamthesis-lyx
\options a4paper,titlepage
\use_default_options false
\begin_modules
enumitem
\end_modules
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing onehalf
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine natbib
\cite_engine_type numerical
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Seguridad
\begin_inset CommandInset label
LatexCommand label
name "chap:Seguridad"

\end_inset


\end_layout

\begin_layout Standard
En el capítulo 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Enrutamiento"

\end_inset

 pudimos ver el listado de todas las rutas de acceso disponibles.
 Alguna de estas rutas son algo especiales, ya que solo están disponibles
 para una serie de usuarios con ciertos permisos .
 En este capítulo vamos a tratar como se gestiona la autenticación y los
 permisos de acceso a las distintas rutas web del programa.
\end_layout

\begin_layout Section
Autenticación de usuarios
\end_layout

\begin_layout Standard
Para la autenticación de usuarios se ha hecho uso de la extensión Flask-Login,
 el cual proporciona una gestión básica de sesiones de usuarios para Flask,
 manejando tareas tan comunes como inicio, cierre e identificación automática
 de sesiones.
\end_layout

\begin_layout Standard
Existen dos formas de autenticación:
\end_layout

\begin_layout Itemize
Mediante correo y contraseña, como se puede ver en la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "correo_contraseña"

\end_inset

, se lee de un formulario, el correo y la contraseña introducida por el
 usuario, primero se verifica que el usuario existe, y luego se comprueba
 que el hash de la contraseña es correcta.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

@blueprint.route('/loginEmail', methods=['GET', 'POST'])
\end_layout

\begin_layout Plain Layout

def loginEmail():
\end_layout

\begin_layout Plain Layout

    form = LoginFormEmail()
\end_layout

\begin_layout Plain Layout

    if form.validate_on_submit():
\end_layout

\begin_layout Plain Layout

        user = User.query.filter_by(email=form.email.data).first()
\end_layout

\begin_layout Plain Layout

        if user is not None and user.verify_password(form.password.data):
\end_layout

\begin_layout Plain Layout

            login_user(user, form.remember_me.data)
\end_layout

\begin_layout Plain Layout

            return redirect(request.args.get('next') or url_for('main.index'))
\end_layout

\begin_layout Plain Layout

        flash(gettext('Invalid email or password.'))
\end_layout

\begin_layout Plain Layout

    return render_template('auth/loginEmail.html', form=form)
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Autenticación mediante correo y contraseña
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "correo_contraseña"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Mediante OpenID, el programa se intenta autentificar con el servidor OpenID
 solicitado por el usuario, como se puede ver en la figura
\begin_inset CommandInset ref
LatexCommand ref
reference "traza_openID"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/julio/flask/frame_game_theory/memoria/latex/Memoria PFC/figures/openID.png
	width 90line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Identificación mediante OpenID
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "traza_openID"

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Control de acceso
\end_layout

\begin_layout Standard
Debido a que existen ciertas funcionalidades a las que solo pueden acceder
 ciertos usuarios, hay que implementar un control de acceso a las distintas
 rutas web, las cuales se han detallado en el capítulo 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Enrutamiento"

\end_inset

.
\end_layout

\begin_layout Standard
Para ello, antes de cada petición se comprueba que el usuario se ha autenticado
 y de que usuario se trata, como se puede ver en la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "before_request"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

@blueprint.before_app_request
\end_layout

\begin_layout Plain Layout

def before_request():
\end_layout

\begin_layout Plain Layout

    if current_user.is_authenticated():
\end_layout

\begin_layout Plain Layout

        g.user = current_user
\end_layout

\begin_layout Plain Layout

    else:
\end_layout

\begin_layout Plain Layout

        g.user = None
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Control de acceso
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "before_request"

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Luego, las vistas de las distintas rutas se han protegido mediante decoradores,
 que comprueban entre otras cosas los permisos del usuario.
 Los decoradores disponibles son los siguientes:
\end_layout

\begin_layout Itemize
login_required: Comprueba que el usuario ha ingresado en la plataforma.
\end_layout

\begin_layout Itemize
researcher_requerid: Comprueba que el usuario es un investigador.
\end_layout

\begin_layout Itemize
finished_survey: Comprueba que el usuario ha finalizado la encuesta.
\end_layout

\begin_layout Itemize
belong_researcher: Valida que la encuesta, sección o pregunta que que quiere
 modificar pertenece al investigador en cuestión y no a otro.
\end_layout

\begin_layout Itemize
valid_survey: Comprueba que la encuesta ya se ha publicado.
\end_layout

\begin_layout Itemize
there_is_stateSurvey: Valida que existe y es valido el estado de la encuesta
 por parte de un usuario que quiere rellenar una encuesta.
\end_layout

\begin_layout Standard
Por ejemplo, en la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "ejemplo_control_acceso"

\end_inset

, se puede ver como se protege la vista de creación de una nueva encuesta,
 a la cual se puede acceder mediante la dirección 
\emph on
http://servidor/survey/new
\emph default
, antes de poder acceder a la vista, se comprueba que el usuario se haya
 autentificado en el sistema, mediante el decorador 
\emph on
@login_required
\emph default
, y que además el usuario tenga permisos de investigador, 
\emph on
@researcher_required
\emph default
.
 De esta forma se puede proteger las páginas a los que los usuarios pueden
 acceder.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

[code]
\end_layout

\begin_layout Plain Layout

@blueprint.route('/survey/new', methods = ['GET', 'POST'])
\end_layout

\begin_layout Plain Layout

@login_required
\end_layout

\begin_layout Plain Layout

@researcher_required
\end_layout

\begin_layout Plain Layout

def new_survey():
\end_layout

\begin_layout Plain Layout

[/code]
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Ejemplo de control de acceso
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "ejemplo_control_acceso"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Si el usuario no tiene los permisos necesarios, figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "decorador_researcher"

\end_inset

, se le redirige a página HTTP personalizada con el código de estado 403,
 figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "403"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def researcher_required(f)
\end_layout

\begin_layout Plain Layout

    """Checks if the user is and researcher or not"""
\end_layout

\begin_layout Plain Layout

    @wraps(f)
\end_layout

\begin_layout Plain Layout

    def decorated_function(*args, **kwargs):
\end_layout

\begin_layout Plain Layout

        if current_user.is_researcher():
\end_layout

\begin_layout Plain Layout

            return f(*args, **kwargs)
\end_layout

\begin_layout Plain Layout

        else:
\end_layout

\begin_layout Plain Layout

            return abort(403)
\end_layout

\begin_layout Plain Layout

    return decorated_function
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Decorador researcher_required
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "decorador_researcher"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /home/julio/flask/frame_game_theory/memoria/latex/Memoria PFC/figures/403.png
	width 100line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Página 403
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "403"

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_body
\end_document
